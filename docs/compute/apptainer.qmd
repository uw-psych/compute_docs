---
title: "Apptainer"
description: The Apptainer container environment
order: 20
resources:
    - "_static/asciicasts/casts/apptainer-python-speedtest.cast"
include-in-header:
    text: |
        <link rel="stylesheet" type="text/css" href="/_static/asciicasts/asciinema-player.css" />
include-after-body:
    text: |
        <script src="/_static/asciicasts/asciinema-player.min.js"></script>
        <script>
            term_font_family="'Iosevka Term Web', monospace'"
            document.querySelectorAll('.cast').forEach((block) => {
                AsciinemaPlayer.create("/_static/asciicasts/casts/" + block.id + ".cast", block, {
                      terminalFontFamily: 'Iosevka Term Web, monospace',
                       fit: false
                }) 
                });
        </script>
---

# Apptainer

Apptainer (formerly Singularity) is a simple container platform enabling users to install and run software that would otherwise be unsupported by the host environment.

On Klone, the `apptainer` command is available on all {{< term "compute node" display="compute nodes" >}}, but it is not available on the {{< term "login node" >}}.

By default, the `apptainer` command will use the system version of Apptainer:

```bash
which apptainer # prints /usr/bin/apptainer
apptainer --version # apptainer version 1.2.4-1.el8 (as of 2023-12-05)
```

::: {.callout-note title="Loading a different version of Apptainer using Lmod"}

To use a different version of Apptainer, load the appropriate [{{< term Lmod >}}](../compute/lmod.qmd) module. For example, to use Apptainer version 1.1.5:

```bash
module load apptainer/1.1.5
which apptainer # prints /sw/apptainer/1.1.5/bin/apptainer
apptainer --version # apptainer version 1.1.5
```

To see all available versions of Apptainer, run:

```bash
module -t spider apptainer
```

The default module is indicated by the tag `(D)` following the version.
For example, `apptainer/local (D)` indicates that the default version is `local`.
(The local version is the version installed on the system.)

:::

## Using Apptainer

### Interactive session

#### Bind paths

{{< term Apptainer >}} containers are designed to be portable, so by default they do not have access to any files on the host system. To make files available to the container, you must bind them to the container. This is done using the `--bind` option of the `apptainer` command or the `APPTAINER_BINDPATH` {{< term "environment variable" >}}.

::: {.callout-tip title="Default bind paths"}
By default, `apptainer` will make several directories available within the container by binding them to the same path in the container, so that `/somefolder` on the host is available as `/somefolder` within the container.

These directories include:
- `$HOME` (your home directory, a.k.a. `~`)
- `/tmp` (temporary directory -- unique to each node, contents are purged when the usersâ€™ last job running on the node completes)
- `$PWD` (the current working directory, i.e. the directory you are in when you run `apptainer`)

The Klone Apptainer installation is also configured to bind several other following directories to the same path in the container, including:
- `/mmfs1` (the main filesystem)
- `/scr` (the scratch filesystem, same as `/tmp`)
:::

We recommend setting the following binds before running a container:

``` bash
export APPTAINER_BINDPATH="/gscratch" # Make /gscratch available within the container
```

1.  To start an Apptainer container interactively, run the following:

``` bash
apptainer shell <path_to_container>
```

## Pulling an Apptainer image from docker.io registry

```bash
apptainer pull docker://<image_name>\[:<tag>\] # Pulls the image from docker.io
```

## Writing and building Apptainer recipes

See the [Apptainer documentation](https://apptainer.org/docs/user/main/definition_files.html). <FIXME>

## Usage example

### Using Apptainer to run a Python script

Let's try running a Python script using Apptainer. The [release notes](https://docs.python.org/3/whatsnew/3.11.html#summary-release-highlights) for Python version 3.11 say that it is "between 10-60% faster than Python 3.10". Is this true? Let's find out! We'll write a simple Python script to test this and use Apptainer to run it on Python 3.10 and Python 3.11.

``` {.python filename="speedtest.py"}
#!/usr/bin/env python3
import os, sys, timeit

# Get the values of the environment variables M and N, or use default values:
M = int(os.getenv("M", default=100)) # inner loop iterations # <1>
N = int(os.getenv("N", default=1000)) # outer loop iterations # <1>

# Print details about the test to stderr: # <2>
print(f"Python v{sys.version_info.major}.{sys.version_info.minor}", file=sys.stderr) # <2>
print(f'Running "-".join([str(n) for n in range({M})]) {N} times', file=sys.stderr) # <2>

# Run the test:
result = timeit.timeit(lambda: "-".join([str(n) for n in range(M)]), number=N)

# Print the result:
print(result) # <3>
```
1. The `os.getenv` function retrieves the value of an {{< term "environment variable" >}} or returns a default value if the variable is not set.
2. The `print` function prints to the {{< term stderr display="standard error" >}} stream (`stderr`) instead of the {{< term stdout display="standard output" >}} stream (`stdout`). This is useful because we want to print the result of the test to `stdout` so that we can save the output by redirecting it to a file, but we also want to print some information about the test to `stderr` so that it doesn't get mixed up with the result.
3. The `print` function prints to the {{< term stdout display="standard output" >}} stream (`stdout`) by default. We can redirect this to a file in {{< term bash >}} using the `>` operator.


Now let's run the script using Python 3.10 and Python 3.11. For the image, we will use the `python:3.10-slim` and `python:3.11-slim` images from the official [Python images](https://hub.docker.com/_/python).

::: {.callout-tip title="Tagged container releases"}
The `python:3.10-slim` and `python:3.11-slim` images are tagged with the version of Python they contain. This means that if you pull the `python:3.10-slim` image today, it will always contain Python 3.10, even if Python 3.11 is released tomorrow.

The `python:*-slim` images are designed to contain only the minimal set of packages required to run Python and are therefore much smaller than the standard Python images (~45 MiB vs ~350 MiB).
:::

We'll use the `apptainer exec` command to run the script inside an Apptainer container:

``` bash
apptainer exec docker://python:3.10-slim python3 speedtest.py # <1>
```
1. The `apptainer exec` command runs a command inside an Apptainer container. The `docker://python:3.10-slim` argument tells Apptainer to use the `python:3.10-slim` image from the Docker registry. The `python3 ./speedtest.py` argument tells Apptainer to run the `python3` command inside the container and provide it with the argument `speedtest.py`.

You should see something like:

```bash
Python v3.10 # <1>
Running "-".join([str(n) for n in range(100)]) 1000 times # <1>
0.005480865002027713 # <2>
```
1. This is printed to {{< term stderr >}} because we used `print(..., file=sys.stderr)` in the script.
2. This is printed to {{< term stdout >}}.

It probably didn't take very long to run the script. Let's try running it again with larger values of `M` and `N`. We can set the values of `M` and `N` using {{< term "environment variable" display="environment variables" >}}:

```bash
export M=1000 N=100_000 # <1>
apptainer exec docker://python:3.10-slim python3 speedtest.py
```
1. The `export` command sets the values of the `M` and `N` {{< term "environment variable" display="environment variables" >}} and makes them avaialble to other programs like `apptainer`. `N`  is set to`100_000` instead of `100000` because underscores can be used in Python to make large numbers easier to read. This is a feature of Python, not the shell, which interprets `100_000` as just a string and not a number.

It should take a bit longer to run this time.

Now let's try running the script using Python 3.11:

``` bash
apptainer exec docker://python:3.11-slim python3 speedtest.py
```

We don't need to set the values of `M` and `N` again because they are still set from the previous command via `export` (unless you closed your terminal window or logged out).

It probably took a bit less time to run the script this time.

Is Python 3.11 really faster than Python 3.10? Let's find out by redirecting the output of the script to a file:

```bash
apptainer exec docker://python:3.10-slim python3 speedtest.py > py3.10.txt # <1>
apptainer exec docker://python:3.11-slim python3 speedtest.py > py3.11.txt # <1>
cat py3.10.txt py3.11.txt # show the results # <2>
```
1. In {{< term bash >}}, the `>` operator redirects the output of a command to a file. If the file already exists, it will be overwritten. If you want to append to an existing file instead, use the `>>` operator. These operators can be used with any command, not just `apptainer`. For example, `ls > my_files.txt` will write the output of `ls` to the file `my_files.txt`.
2. The `cat` command prints the contents of a file to {{< term stdout >}}` If you want to print the contents of multiple files, you can list them all as arguments to `cat`.

We see the results, but they're not very easy to interpret. Let's pipe the output to Python to calculate the speedup:

```bash
cat py3.10.txt py3.11.txt | apptainer exec docker://python:3.11-slim python3 -c 'print(float(input())/float(input()))' # <1>
```
1. The `|` operator pipes the output of one command to the input of another. In this case, we are piping the output of `cat py3.10.txt py3.11.txt` to the input of `apptainer exec docker://python:3.11-slim python3 -c 'print(float(input())/float(input()))'`. The `-c` option of the `python3` command tells Python to run the code provided as an argument. The code `print(float(input())/float(input()))` reads two lines of input from {{< term stdin display="standard input" >}}, converts them to floating point numbers, divides the first by the second, and prints the result.

In my case, Python 3.11 was about 1.3 times faster than Python 3.10. Not bad!

#### Demo

Here's a demo of the above commands. Note that I used `M=200` and `N=50_000` instead of `M=1000` and `N=100_000` because it takes a long time to run the script with the larger values of `M` and `N`.

::::: {.cast #apptainer-python-speedtest}
:::::

## Clearing Apptainer cache

Apptainer caches all the images it downloads in a cache directory to avoid downloading them again. You can clear the cache by running:

```bash
apptainer cache clean
```

## Changing Apptainer cache

You can change the cache directory by setting the `APPTAINER_CACHE` {{< term "environment variable" >}}. For example, to set the cache directory to `/tmp/<your-username>/apptainer-cache`, you can use the `$USER` environment variable:

```bash
export APPTAINER_CACHE="/tmp/$USER/apptainer-cache"
```

Apptainer will create the cache directory if it does not already exist.

You'll need to set the `APPTAINER_CACHE` {{< term "environment variable" >}} every time you want to use Apptainer, so it's a good idea to add it to your {{< term bashrc display="~/.bashrc" >}} file so that it is set automatically when you log in.

